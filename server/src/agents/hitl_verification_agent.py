"""
#Human-in-the-loop verification agent for evaluating AI-generated content.
This agent is responsible for verifying the accuracy and relevance of the content generated by the AI agents. It interacts with human reviewers to confirm the quality of the generated content, ensuring that it meets the required standards before being used in further processing or presentation.

Functinonality:
- Based on the Content Generated in the "agent_query" by the Data Collector Agent, the HITL Verification Agent will analyze the content and prompt the human reviwer to verify the accuracy and realavance of the Data.
- The agent will present the generated content to the human reviewer, who will evaluate its quality and provide feedback.
- The agent after confirmation will adequately format the data to feeded to the Query-refiner Agent  or Data Collector Agent for further processing.


# Key Outcome:

From the User Query of : "I want to do my Brand Health Monitoring".

The HITL Verification Agent, Data Collector Agent and Query Refiner Agent will work together to refine the user query and collect the necessary data. The final output will be a JSON object that contains the refined query, additional filters, and any other relevant information needed to fetch data from the Sprinklr API.

#Example:
Input : "I want to do my Brand Health Monitoring"

Final Output after Looping Process :
The Filters can be more and more specific, which will be decided by the Query Refiner Agent as it has the Access to the RAG Context of the List of all the available and existing Filters / Keywords in the Sprinklr Dashboard.

{
    "refined_query":"The User wants to do Brand Health Monitoring",
    "filters": {
        "time_period": "last 30 days",
        "channels": ["Twitter", "Facebook", "Instagram"],
        "metrics": [
            "Brand Mentions",
            "Sentiment Analysis",
            "Top Channels",
            "Key Topics",
            "Top Influencers",
            "PR Metrics"
        ]
    },
}


"""

import json
import logging
from typing import Dict, Any, List, Optional, Tuple
from langchain_core.messages import HumanMessage, AIMessage
from datetime import datetime
from src.agents.base.agent_base import LLMAgent, create_agent_factory
from langgraph.types import Interrupt  # Updated import to use Interrupt class properly
from src.helpers.states import DashboardState


logger = logging.getLogger(__name__)

class HITLVerificationAgent(LLMAgent):
    """
    Human-in-the-Loop Verification Agent for managing user confirmations and data validation.
    
    Uses LangGraph's interrupt feature to pause workflow for human input.
    """
    
    def __init__(self, llm=None):
        super().__init__("hitl_verification_agent", llm=llm)
    
    async def invoke(self, state: DashboardState) -> Dict[str, Any]:
        """
        Invokes the HITL process.
        It prepares data for human review, interrupts the graph, and processes the human's response.
        
        This method will raise an Interrupt that must be caught by the workflow, causing the
        workflow to pause execution until human input is provided.
        
        Args:
            state: The current workflow state
            
        Returns:
            A dictionary of state updates when the workflow is resumed
            
        Raises:
            Interrupt: When human input is required, with payload for the human
        """
        logger.info(f"{self.agent_name} invoked for human-in-the-loop verification.")
        
        # Access hitl_input_payload as an attribute
        hitl_input_payload = getattr(state, "hitl_input_payload", None)
        
        # Ensure hitl_outcome field exists on state (safety check)
        if not hasattr(state, "hitl_outcome"):
            logger.warning(f"{self.agent_name}: 'hitl_outcome' field missing from state, will be created by update")
            
        if not hitl_input_payload or not isinstance(hitl_input_payload, dict):
            logger.error(f"{self.agent_name}: Missing or invalid 'hitl_input_payload' in state.")
            return {
                "hitl_outcome": {
                    "approved": False, 
                    "error": "Missing or invalid input payload for HITL verification.",
                    "next_action_preference": "stop"
                }
            }

        logger.info(f"Interrupting graph for human verification. Payload for human: {hitl_input_payload}")
        
        # Check if this is a resumption with human input
        # If we have existing HITL outcome, this might be a resumption
        if hasattr(state, "hitl_outcome") and state.hitl_outcome:
            # This is a resumption after human input
            logger.info(f"Workflow resumed with HITL outcome: {state.hitl_outcome}")
            return {"hitl_verification_processed": True}
        
        # Otherwise, return an Interrupt to pause the workflow for human input
        # In LangGraph, we return an Interrupt object rather than raising it
        logger.info("Returning interrupt for human verification")
        return Interrupt(value=hitl_input_payload)


# Create factory function using the base helper
create_hitl_verification_agent = create_agent_factory(HITLVerificationAgent, "hitl_verification")