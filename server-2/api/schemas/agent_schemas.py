from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional

class ChatMessageInput(BaseModel):
    conversation_id: Optional[str] = None 
    message: str

class ChatMessageOutput(BaseModel):
    conversation_id: str
    response: str # Last AI message
    full_conversation: List[Dict[str, str]] # All messages in the conversation
    current_state_summary: Dict[str, Any] # A selection of important fields from ProjectState
    requires_human_input: bool

class StateUpdateRequest(BaseModel):
    # This model is for potential direct updates to state, though most changes occur via agents.
    user_persona: Optional[str] = None
    products: Optional[List[str]] = None
    location: Optional[str] = None
    channels: Optional[List[str]] = None
    goals: Optional[List[str]] = None
    time_period: Optional[str] = None
    additional_notes: Optional[str] = None
    # Example: Can be used by a settings panel in the UI to override collected data.

class ElasticsearchQueryRequest(BaseModel):
    # This would typically be internal or for a dedicated ES query service.
    # For this project, queries are generated by an agent.
    queries: List[Dict[str, Any]] = Field(default_factory=list, examples=[[{"page":0, "size":100, "keywords": ["example"], "filters": {}}]])

class ElasticsearchSearchResponse(BaseModel):
    # Placeholder for actual Elasticsearch results structure.
    results: List[Dict[str, Any]] = Field(default_factory=list)
    total_hits: int = 0
    # Example document structure within results: {"id": "doc1", "text": "content...", "source": "twitter"}

class ThemeExtractionRequest(BaseModel):
    # This might be used if theme extraction is offered as a separate service.
    # In the current flow, it\'s part of the DataProcessingAgent.
    documents: List[Dict[str, Any]] = Field(default_factory=list, description="List of documents, each with at least an \'id\' and \'text\' field.", examples=[[{"id": "doc1", "text": "Sample content here."}]])

class ThemeExtractionResponse(BaseModel):
    themes: List[Dict[str, Any]] = Field(default_factory=list, description="List of extracted and scored themes.", examples=[[{"theme_label": "Customer Service", "score": 0.85, "document_count": 10, "example_doc_ids": ["doc1", "doc3"]}]])

class ProjectStateOutput(BaseModel):
    """Full project state for retrieval, mirrors models.project_state.ProjectState"""
    user_persona: Optional[str] = None
    products: List[str] = Field(default_factory=list)
    location: Optional[str] = None
    channels: List[str] = Field(default_factory=list)
    goals: List[str] = Field(default_factory=list)
    time_period: Optional[str] = None
    additional_notes: Optional[str] = None
    
    conversation_id: str
    current_stage: str
    missing_fields: List[str] = Field(default_factory=list)
    is_complete: bool = False
    requires_human_input: bool = True
    
    elasticsearch_queries: List[Dict[str, Any]] = Field(default_factory=list)
    retrieved_data: List[Dict[str, Any]] = Field(default_factory=list) # Potentially large, consider summarizing or paginating
    processed_themes: List[Dict[str, Any]] = Field(default_factory=list)
    
    messages: List[Dict[str, str]] = Field(default_factory=list)
